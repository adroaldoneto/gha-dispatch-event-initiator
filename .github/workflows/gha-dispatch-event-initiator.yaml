name: Dispatch Event

on:
  pull_request:
    branches:
     - test-*
  
jobs:

  workflow_call:
    name: Workflow Call
    uses: adroaldoneto/gha-dispatch-event-initiator/.github/workflows/workflow-call.yml

  build:
    runs-on: ubuntu-latest
    outputs:
      job_id: ${{ steps.build.outputs.job_id }}
    if: contains(github.base_ref, 'test-')
    steps:
      - name: Dispatch init event
        if: github.event.action != 'success'
        id: build
        run: |
          echo "base_ref: ${{ github.base_ref }}"
          JOB_ID=$(echo $RANDOM | md5sum | head -c 10)
          echo "::set-output name=job_id::$JOB_ID" 
          curl -X POST https://api.github.com/repos/adroaldoneto/gha-dispatch-event/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.ACCESS_TOKEN }} \
          --data '{"event_type": "release", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "ref_name": "${{ github.ref_name }}", "job_id": "'"$JOB_ID"'" }}'

  VERIFY_IF_COMPLETED:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Get Runs
        run: |
          sleep 16s
          DATE_TIME=$(date --date='3 minutes ago' -u +"%Y-%m-%dT%H:%M:%SZ")
          curl --location --request GET 'https://api.github.com/repos/adroaldoneto/gha-dispatch-event/actions/runs?created=>'"$DATE_TIME"'&event=repository_dispatch&status=success' \
          --header 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.ACCESS_TOKEN }} \
          -o runs.json

      - name: Set job url
        id:  set_job_url
        run: |
          ls
          echo "::set-output name=url::$(cat runs.json | jq -c '.workflow_runs[0].jobs_url')"  

      - name: Get Jobs
        run: | 
          curl --location --request GET ${{ steps.set_job_url.outputs.url }} \
          --header 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.ACCESS_TOKEN }} \
          -o jobs.json   
      
      - name: Set Job name
        id: set_job_name 
        run: |
          echo "::set-output name=name::$(cat jobs.json | jq -c '.jobs[] | select(.name == "build-'${{ needs.build.outputs.job_id }}'").name')"

      - name: Success Or Error
        run: |
          if [ -n "${{ steps.set_job_name.outputs.name }}" ]; then 
            echo "Validation success"
            exit 0; 
          else
            echo "Job name not found"
            exit 1; 
          fi
